//方法一，动态规划
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int dp[10010], w[10010];
bool choice[10010][110];
int cmp1(int a, int b){return a > b;}
int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    for(int i = 1; i <= n; i++)
        scanf("%d", &w[i]);
    sort(w + 1, w + n + 1, cmp1);
    for(int i = 1; i <= n; i++) {
        for(int j = m; j >= w[i]; j--) {
            if(dp[j] <= dp[j-w[i]] + w[i]) {
                choice[i][j] = true;
                dp[j] = dp[j-w[i]] + w[i];
            }
        }
    }
    if(dp[m] != m) printf("No Solution");
    else {
        vector<int> arr;
        int v = m, index = n;
        while(v > 0) {
            if(choice[index][v] == true) {
                arr.push_back(w[index]);
                v -= w[index];
            }
            index--;
        }
        for(int i = 0; i < arr.size(); i++) {
            if(i != 0) printf(" ");
            printf("%d", arr[i]);
        }
    }
    return 0;
}

//方法二，dfs,但是测试案列中会有超时的
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
//1126
bool cmp(int a,int b) {
	return a < b;
}
int n, m, num;
vector<int> ans,coin,temp;
void dfs(int root, int sum) {
	if (sum + coin[root] == m) {
		temp.push_back(coin[root]);
		if(ans.size()==0)
			ans = temp;
	}
	temp.push_back(coin[root]);
	for (int i = root+1; i < n; i++) {
		if (sum + coin[i] > m) {
			break;
		}
		dfs(i, sum + coin[root]);
	}
	temp.pop_back();
}
int main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; i++) {
		scanf("%d", &num);
		coin.push_back(num);
	}
	sort(coin.begin(), coin.end(), cmp);
	for (int i = 0; i < n; i++) {
		dfs(i,0);
	}
	if (ans.size() != 0) {
		for (int i = 0; i < ans.size(); i++) {
			if (i != 0) printf(" ");
			printf("%d", ans[i]);
		}
	}
	else
		printf("No Solution");
	return 0;
}
