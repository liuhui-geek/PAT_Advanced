//方法一
#include<iostream>
#include <cstdio>
#include<vector>
using namespace std;
int post[31];
int in[31];
vector<int> result(10000);
void pre(int root,int start,int end,int index) {
	if (start > end)
		return;
	int i = start;
	while (i<end && in[i] != post[root]) i++;
	result[index] = post[root];
	pre(root - (end - i + 1), start, i-1,2*index+1);
	pre(root - 1, i + 1, end,2*index+2);
}
int main() {
	int n = 0;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> post[i];
	}
	for (int i = 0; i < n; i++) {
		cin >> in[i];
	}
	pre(n-1,0,n-1,0);
	int sum = 0;
	for (int i = 0; i < result.size(); i++) {
		if (result[i] != 0) {
			cout << result[i];
			sum++;
			if (sum < n )
				cout << " ";
		}
		
	}
	return 0;
}


//方法二
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
//1020
struct node{
	int data;
	node* left;
	node* right;
};
int n,post[31],in[31],level[31];
node *create(int postleft,int postright,int inleft,int inright){
	if(postleft>postright)
		return NULL;
	node *root = new node;
	root->data = post[postright];
	int k;
	for(k=inleft;k<=inright;k++){
		if(in[k]==post[postright])
			break;
	}
	int numleft = k-inleft;
	root->left = create(postleft,postleft+numleft-1,inleft,k-1);
	root->right = create(postleft+numleft,postright-1,k+1,inright);
	return root;
}
void bfs(node *root){
	queue<node*> q;
	q.push(root);
	int num = 0;
	while(!q.empty()){
		node *temp = q.front();
		q.pop();
		num++;
		printf("%d",temp->data);
		if(num<n) 
			printf(" ");
		if(temp->left!=NULL)
			q.push(temp->left);
		if(temp->right!=NULL)
			q.push(temp->right);
	}
}
int main(){
	cin>>n;
	for(int i=1;i<=n;i++)
		scanf("%d",&post[i]);
	for(int i=1;i<=n;i++)
		scanf("%d",&in[i]);
	node *root = create(1,n,1,n);
	bfs(root);
	return 0;
}
