#include<iostream>
#include<algorithm>
#include<set>
using namespace std;
//1118   15:38
int n,id,query,num,cnt = 0,first,second,father[10002];
bool exist[10002];
int findfather(int a){
	int x = a;
	while(a!=father[a])
		a = father[a];
	while(x!=father[x]){
		int z = father[x];
		father[x] = a;
		x = z;
	}
	return a;
}
void Union(int a,int b){
	int aa = findfather(a);
	int bb = findfather(b);
	if(aa!=bb)
		father[aa] = bb;
}
int main(){
	scanf("%d",&n);
	set<int> tree;
	for(int i=0;i<10002;i++)
		father[i] = i;
	for(int i=0;i<n;i++){
		scanf("%d",&num);
		if(num!=0){
			scanf("%d",&first);
			exist[first] = true;
			for(int j=1;j<num;j++){
				scanf("%d",&id);
				Union(first,id);
				exist[id] = true;
			}
		}
	}
	for(int i=0;i<10002;i++){
		if(exist[i]==true){
			cnt++;
			int root = findfather(i);
			tree.insert(root);
		}
	}
	printf("%d %d\n",tree.size(),cnt);
	scanf("%d",&query);
	for(int i=0;i<query;i++){
		scanf("%d%d",&first,&second);
		int a = findfather(first);
		int b = findfather(second);
		if(a==b)
			printf("Yes\n");
		else
			printf("No\n");
	}
	return 0;
}
