方法一：
//最长公共子序列
#include<iostream>
#include<sstream>
using namespace std;
int a[10002];
int main() {
	int n;
	cin >> n;
	bool flag = false;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
		if (a[i] > 0) {           //判断特殊情况，是否全部为负数
			flag = true;
		}
	}
	int first = 0, end = 0, sum = 0, maxsum = a[0];
	if (flag) {
		for (int i = -1; i < n - 1; i++) {          //两层循环判断
			for (int j = i + 1; j < n; j++) {
				sum = sum + a[j];
				if (sum > maxsum) {
					first = i + 1;
					end = j;
					maxsum = sum;
				}
			}
			sum = 0;
		}
		cout << maxsum << " " << a[first] << " " << a[end];
	}
	else {
		maxsum = 0;
		cout << maxsum << " " << a[0] << " " << a[n-1];
	}
	return 0;
}



方法二：
//1007
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
struct node{
	int data;
	int first,last;
};
int main(){
	int n,dp[10002],max = -1000000,index = 0;
	bool flag = false;
	vector<node> a(10002);
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&a[i].data);
		if(a[i].data>=0)
			flag = true;
	}
	if(flag){
		dp[0] = a[0].data;
		a[0].first =a[0].last = 0;
		for(int i=1;i<n;i++){
			if(a[i].data>dp[i-1]+a[i].data){
				dp[i] = a[i].data;
				a[i].first = i;
				a[i].last = i;
			}
			else{
				dp[i] = dp[i-1]+a[i].data;
				a[i].first = a[i-1].first;
				a[i].last = i;
			}
		}
		for(int i=0;i<n;i++){
			if(dp[i]>max){
				max = dp[i];
				index = i;
			}
		}
		printf("%d %d %d",max,a[a[index].first].data,a[a[index].last].data);
	}
	else
		printf("%d %d %d",0,a[0].data,a[n-1].data);
	return 0;
}
