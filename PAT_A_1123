#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
struct node {
	int data;
	node* left;
	node* right;
};
int n, num,index;
bool flag1 = false, flag2 = false;
int gethigh(node* root) {
	if (root == NULL) 
		return 0;
	return max(gethigh(root->left), gethigh(root->right)) + 1;
}
node* R(node* root) {
	node* temp = root->left;
	root->left = temp->right;
	temp->right = root;
	return temp;
}
node* L(node* root) {
	node* temp = root->right;
	root->right = temp->left;
	temp->left = root;
	return temp;
}
node* LR(node* root) {
	root->left = L(root->left);
	return R(root);
}
node* RL(node* root) {
	root->right = R(root->right);
	return L(root);
}
node* insert(node* root, int data) {
	if (root == NULL) {
		root = new node;
		root->data = data;
		root->left = root->right = NULL;
	}
	else if (data < root->data) {
		root->left = insert(root->left, data);
		if (gethigh(root->left) - gethigh(root->right) == 2) {
			if (data < root->left->data)
				root = R(root);
			else
				root = LR(root);
		}
	}
	else {
		root->right = insert(root->right, data);
		if (gethigh(root->left) - gethigh(root->right) == -2) {
			if (data > root->right->data)
				root = L(root);
			else
				root = RL(root);
		}
	}
	return root;
}
void bfs(node* root) {
	queue<node*> q;
	q.push(root);
	while (!q.empty()) {
		node* front = q.front();
		q.pop();
		index++;
		printf("%d", front->data);
		if (index < n) printf(" ");
		if (front->left != NULL) {
			if (flag1 == true) flag2 = true;
			q.push(front->left);
		}
		else
			flag1 = true;
		if (front->right != NULL) {
			if (flag1 == true) flag2 = true;
			q.push(front->right);
		}
		else
			flag1 = true;
	}
}
int main() {
	scanf("%d", &n);
	node* root = NULL;
	for (int i = 0; i < n; i++) {
		scanf("%d", &num);
		root = insert(root, num);
	}
	bfs(root);
	printf("\n");
	if (flag2 == true)
		printf("NO");
	else
		printf("YES");
	return 0;
}
