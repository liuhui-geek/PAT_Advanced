#include <iostream>
#include <string>
#include<vector>
#include <algorithm>
#include<math.h>
using namespace std;
long long transfer(string a, int radix) {
	long long length = a.length();
	long long  ans = 0;
	for (int i = length - 1; i >= 0; i--) {
		if (isalpha(a[i])) {
			ans += (a[i] - 'a' + 10)*pow(radix, length - i - 1);
		}
		else {
			ans += (a[i] - '0')*pow(radix, length - i - 1);
		}
	}
	return ans;
}
void binSearch(long long low, long long high, string q, long long ans1) {
	while (low <= high) {
		long long mid = (low + high) / 2;
		long long ans2 = transfer(q, mid);
		if (ans1 == ans2) {
			cout << mid;
			return;
		}
		//尤其注意是否超出界限；
		else if (ans2 > ans1 || ans2<0) {
			high = mid - 1;

		}
		else {
			low = mid + 1;
		}
	}
	cout << "Impossible";
}
int main() {
	string n1, n2, p, q;
	long long tag, radix;
	cin >> n1 >> n2;
	cin >> tag >> radix;
	if (tag == 1) {
		p = n1;
		q = n2;
	}
	else {
		p = n2;
		q = n1;
	}
	//将p转换为10进制数
	bool flag = false;
	long long ans1 = transfer(p, radix);
	long long num = 0, low = 0, high = 0;
	for (int i = 0; i < q.length(); i++) {
		if (isalpha(q[i]) ? num = q[i] - 'a' + 10 : num = q[i] - '0') {
			low = max(low, num);
		}
	}
	high = max(low++, ans1 + 1);
	binSearch(low, high, q, ans1);
	return 0;
}
