#include<iostream>
#include<map>
#include<algorithm>
#include<string>
using namespace std;

/*
采用结构体加map解决此题
*/
struct school {             //学校信息结构体
	int score;
	string name;
	int num;
	double scoreA, scoreT, scoreB;
}sch[100003];
bool cmp(school a1,school a2) {           //结构体排序函数
	if (a1.score != a2.score) return a1.score > a2.score;
	if (a1.num != a2.num) return a1.num < a2.num;
	return a1.name < a2.name;
}
map<string, int>amap;      //int用于存放该学校位于结构体中的位置
int main() {
	int n = 0;
	cin >> n;           //总数
	int id = 1;
	string idRank, SchoolName;
	double SchoolScore;
	for (int i = 0; i < n; i++) {               //边读取边处理存入map和结构体中
		cin >> idRank >> SchoolScore >> SchoolName;
		for (int j = 0; j < SchoolName.length(); j++) {     //小写处理
			SchoolName[j] = tolower(SchoolName[j]);
		}
		int loc = amap[SchoolName];         
		if (loc == 0) {                          //判断map中是否含有该学校
			loc = id;
			amap[SchoolName] = id;
			id++;
		}
		if (idRank[0] == 'A') {                 //分类计入分中
			sch[loc].scoreA += SchoolScore;
		}
		else if (idRank[0] == 'B') {
			sch[loc].scoreB += SchoolScore;
		}
		else {
			sch[loc].scoreT += SchoolScore ;
		}
		sch[loc].name = SchoolName;
		sch[loc].num++;
	}
	for (int i = 1; i < id; i++) {                  //计算总分
		sch[i].score = (int)(sch[i].scoreB/1.5 + sch[i].scoreA + sch[i].scoreT*1.5);
	}
	sort(sch+1, sch + id, cmp);                       //结构体内容排序
	cout << id - 1 << endl;
	int lastRank = 1;
	for (int i = 1; i < id; i++) {
		if (i != 1 && sch[i].score == sch[i - 1].score) {
			cout << lastRank<<" ";
		}
		else {
			cout << (lastRank=i)<<" ";
		}
		cout << sch[i].name << " " << sch[i].score << " " << sch[i].num << endl;
	}
	return 0;
}


//方法二
#include<string>
#include<iostream>
#include<algorithm>
#include<map>
using namespace std;
struct node {
	string rank,school;
	int a,sum;
	int rankA, rankB, rankT;
	int score = 0;
}nodes[100002];
bool cmp(node a,node b) {
	if (a.score != b.score)
		return a.score > b.score;
	else if (a.sum != b.sum)
		return a.sum < b.sum;
	else
		return a.school < b.school;
}
int main() {
	int n,score;
	map<string, int> amap;
	string id, school;
	cin >> n;
	int index = 1;
	for (int i = 0; i < n; i++) {
		cin >> id >> score >> school;
		transform(school.begin(), school.end(), school.begin(), ::tolower);
		if (amap[school] == 0) {
			if (id[0] == 'A')
				nodes[index].rankA = score;
			else if(id[0]=='T')
				nodes[index].rankT = score;
			else
				nodes[index].rankB = score;
			nodes[index].school = school;
			nodes[index].sum = 1;
			amap[school] = index;
			index++;
		}
		else {
			if (id[0] == 'A')
				nodes[amap[school]].rankA += score;
			else if (id[0] == 'T')
				nodes[amap[school]].rankT += score;
			else
				nodes[amap[school]].rankB += score;
			nodes[amap[school]].sum++;
		}
	}
	for (int i = 1; i < index; i++)
		nodes[i].score = nodes[i].rankA + nodes[i].rankB / 1.5 + nodes[i].rankT*1.5;
	sort(nodes + 1, nodes + index, cmp);
	//输出结果
	cout << index - 1 << endl;
	cout << "1 " << nodes[1].school << " " << nodes[1].score << " " << nodes[1].sum << endl;
	int ranks = 1;
	for (int i = 2; i < index; i++) {
		if (nodes[i].score == nodes[i - 1].score)
			cout << ranks<<" ";
		else {
			cout << i << " ";
			ranks = i;
		}
		cout<<nodes[i].school << " " << nodes[i].score << " " << nodes[i].sum << endl;
	}
	return 0;
}
