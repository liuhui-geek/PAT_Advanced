#include <iostream>
#include<algorithm>
#include<cmath>
using namespace std;
int n, m, c1, c2, a, b, road;
int weight[502], arc[502][502], num[502], path[502],people[502];
bool exist[502];
void Dijkstra(int root) {
	path[root] = 0;
	num[root] = 1;
	people[root] = weight[root];
	for (int i = 0; i < n; i++) {
		int min = 99999999, index = -1;
		for (int j = 0; j < n; j++) {
			if (exist[j] == false && path[j] < min) {    //代表当前节点可达且未访问过
				min = path[j];
				index = j;
			}
		}
		if (index == -1) return;
		exist[index] = true;
		for (int k = 0; k < n; k++) {
			if (exist[k] == false && arc[index][k] < 99999999) {
				if (path[index] + arc[index][k] < path[k]) {
					path[k] = path[index] + arc[index][k];
					num[k] = num[index];
					people[k] = weight[k] + people[index];
				}
				else if (path[index] + arc[index][k] == path[k]) {
					path[k] = path[index] + arc[index][k];
					num[k] += num[index];
					if(people[k] < weight[k] + people[index])
						people[k] = weight[k] + people[index];
				}
			}
		}
	}
}
int main() {
	scanf("%d%d%d%d", &n,&m, &c1, &c2);
	for (int i = 0; i < n; i++) {
		scanf("%d", &weight[i]);
	}
	fill(arc[0], arc[0] + 502 * 502, 99999999);
	for (int i = 0; i < m; i++) {
		scanf("%d%d%d", &a, &b, &road);
		arc[a][b] = arc[b][a] = road;
	}
	for (int i = 0; i < n; i++) {
		path[i] = arc[c1][i];
	}
	Dijkstra(c1);
	printf("%d %d", num[c2], people[c2]);
	return 0;
}
